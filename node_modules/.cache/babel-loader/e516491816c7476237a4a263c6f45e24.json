{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-inferrable-types */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable prefer-const */\nimport { createSlice } from '@reduxjs/toolkit';\nimport { authApiCall } from '../../utils/api';\nlet initialState = {\n  betaFailAnalysis: [],\n  comments: [],\n  totalCount: 0,\n  commentStatus: 0,\n  isLoading: false,\n  csv: '',\n  action: ''\n};\nconst {\n  actions,\n  reducer\n} = createSlice({\n  name: 'beta-fail-analysis',\n  initialState,\n  reducers: {\n    SetBetaFailAnalysis: (state, action) => {\n      state.betaFailAnalysis = action.payload.data;\n    },\n    setComments: (state, action) => {\n      console.log('hi');\n      console.log(action.payload);\n      state.comments = action.payload.data;\n    },\n    setCommentsStatus: (state, action) => {\n      state.commentStatus = action.payload.data;\n    },\n    setIsLoading: (state, action) => {\n      state.isLoading = action.payload;\n    },\n    setAction: (state, action) => {\n      state.action = action.payload;\n    }\n  }\n});\nexport const {\n  setAction,\n  SetBetaFailAnalysis,\n  setIsLoading,\n  setReturnMailAndEmailReportCSV,\n  setComments,\n  setCommentsStatus\n} = actions;\n/**\r\n * getReturnMail\r\n * API - GET call to get beta new accounts report\r\n * @param {string} startDate\r\n * @param {string} endDate\r\n *  @param {string} action\r\n */\n\nexport const getAction = action => async dispatch => {\n  dispatch(setAction(action));\n  dispatch(SetBetaFailAnalysis({\n    data: ''\n  }));\n};\nexport const getUserComment = (system, failUniqueId, comment, createdBy, createdOn) => async dispatch => {\n  console.log('test1');\n\n  try {\n    const {\n      data,\n      status\n    } = await authApiCall.post('FailAnalysisReport/AddComment', {\n      system,\n      failUniqueId,\n      comment,\n      createdBy,\n      createdOn\n    });\n\n    if (status === 200) {\n      dispatch(setCommentsStatus({\n        data: status\n      }));\n    }\n  } catch {//console.log(null)\n  }\n};\nexport const getComments = (system, failUniqueId) => async dispatch => {\n  console.log('test1');\n\n  try {\n    const {\n      data,\n      status\n    } = await authApiCall.get('FailAnalysisReport/GetComments', {\n      params: {\n        system,\n        failUniqueId\n      }\n    });\n\n    if (status === 200) {\n      dispatch(setComments({\n        data: data\n      }));\n      return data;\n    }\n  } catch {\n    dispatch(setComments({\n      data: 'NULL'\n    })); //console.log(null)\n  }\n};\nexport const getBetaFailAnalysis = function (action, fromDate, toDate, ageFilter, accountNumber, branch, subsidiaryNumber, buySell, cusip, pageNumber) {\n  let pageSize = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 20;\n  let sortBy = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 'SnapShotDate, Age';\n  let sortDirection = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 'ASC';\n  let searchFilter = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : '';\n  return async dispatch => {\n    dispatch(setIsLoading(true));\n    dispatch(SetBetaFailAnalysis({\n      data: ''\n    }));\n\n    try {\n      const {\n        data,\n        status\n      } = await authApiCall.post('FailAnalysisReport/GetBetaFailAnalysisHistoryReport', {\n        fromDate,\n        toDate,\n        ageFilter,\n        accountNumber,\n        branch,\n        subsidiaryNumber,\n        buySell,\n        cusip,\n        pageNumber,\n        pageSize,\n        sortBy,\n        sortDirection,\n        searchFilter\n      });\n\n      if (status === 200) {\n        dispatch(setAction(action));\n        dispatch(SetBetaFailAnalysis({\n          data: data\n        }));\n        dispatch(setIsLoading(false));\n        return true;\n      }\n    } catch (e) {\n      console.log('null');\n      dispatch(setIsLoading(false));\n      dispatch(SetBetaFailAnalysis({\n        data: ''\n      }));\n    }\n  };\n};\nexport const betaFailAnalysisDataSelector = store => store.failAnalysis.betafailanalysis.betaFailAnalysis;\nexport const actionSelector = store => store.failAnalysis.betafailanalysis.action;\nexport const errorSelector = store => store.failAnalysis.betafailanalysis.error;\nexport const isLoadingSelector = store => store.failAnalysis.betafailanalysis.isLoading;\nexport const commentSelector = store => store.failAnalysis.betafailanalysis.comments;\nexport const commentStatusSelector = store => store.failAnalysis.betafailanalysis.commentStatus;\nexport default reducer;","map":{"version":3,"sources":["D:/New folder (6)/demo/src/store/failAnalysis/beta-fail-analysis.ts"],"names":["createSlice","authApiCall","initialState","betaFailAnalysis","comments","totalCount","commentStatus","isLoading","csv","action","actions","reducer","name","reducers","SetBetaFailAnalysis","state","payload","data","setComments","console","log","setCommentsStatus","setIsLoading","setAction","setReturnMailAndEmailReportCSV","getAction","dispatch","getUserComment","system","failUniqueId","comment","createdBy","createdOn","status","post","getComments","get","params","getBetaFailAnalysis","fromDate","toDate","ageFilter","accountNumber","branch","subsidiaryNumber","buySell","cusip","pageNumber","pageSize","sortBy","sortDirection","searchFilter","e","betaFailAnalysisDataSelector","store","failAnalysis","betafailanalysis","actionSelector","errorSelector","error","isLoadingSelector","commentSelector","commentStatusSelector"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-inferrable-types */\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { StoreState } from '../index'\r\n\r\n/* eslint-disable prefer-const */\r\n\r\nimport { createSlice, Dispatch, PayloadAction, Slice } from '@reduxjs/toolkit'\r\nimport { authApiCall } from '../../utils/api'\r\n\r\ninterface State {\r\n  csv: string\r\n  betaFailAnalysis: []\r\n  comments: []\r\n  commentStatus:any\r\n  totalCount: number\r\n  isLoading: boolean\r\n  action: string\r\n}\r\n\r\nlet initialState: State = {\r\n  betaFailAnalysis: [],\r\n  comments: [],\r\n  totalCount: 0,\r\n  commentStatus:0,\r\n  isLoading: false,\r\n  csv: '',\r\n  action: '',\r\n}\r\n\r\nconst { actions, reducer }: Slice = createSlice({\r\n  name: 'beta-fail-analysis',\r\n  initialState,\r\n  reducers: {\r\n    SetBetaFailAnalysis: (state: State, action: PayloadAction<any>) => {\r\n      state.betaFailAnalysis = action.payload.data\r\n    },\r\n    setComments: (state: State, action: PayloadAction<any>) => {\r\n      console.log('hi')\r\n      console.log(action.payload)\r\n      state.comments = action.payload.data\r\n    }, \r\n    setCommentsStatus: (state: State, action: PayloadAction<any>) => {\r\n      state.commentStatus = action.payload.data\r\n    },\r\n    setIsLoading: (state: State, action: PayloadAction<boolean>) => {\r\n      state.isLoading = action.payload\r\n    },\r\n\r\n    setAction: (state: State, action: PayloadAction<string>) => {\r\n      state.action = action.payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const {\r\n  setAction,\r\n  SetBetaFailAnalysis,\r\n  setIsLoading,\r\n  setReturnMailAndEmailReportCSV,\r\n  setComments,\r\n  setCommentsStatus,\r\n} = actions\r\n\r\n/**\r\n * getReturnMail\r\n * API - GET call to get beta new accounts report\r\n * @param {string} startDate\r\n * @param {string} endDate\r\n *  @param {string} action\r\n */\r\nexport const getAction: any =\r\n  (action: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setAction(action))\r\n    dispatch(\r\n      SetBetaFailAnalysis({\r\n        data: '',\r\n      })\r\n    )\r\n  }\r\nexport const getUserComment: any =\r\n  ( \r\n    system: string,\r\n    failUniqueId: string,\r\n    comment: string,\r\n    createdBy: string,\r\n    createdOn: string\r\n  ) =>\r\n  async (dispatch: Dispatch) => {\r\n    console.log('test1')\r\n    try {\r\n      const { data, status } = await authApiCall.post(\r\n        'FailAnalysisReport/AddComment',\r\n        {\r\n          system,\r\n          failUniqueId,\r\n          comment,\r\n          createdBy,\r\n          createdOn,\r\n        }\r\n      )\r\n\r\n      if (status === 200) {\r\n        dispatch(\r\n          setCommentsStatus({\r\n            data: status,\r\n          })\r\n        )\r\n      }\r\n    } catch {\r\n      //console.log(null)\r\n    }\r\n  }\r\nexport const getComments: any =\r\n  (system: string, failUniqueId: string) => async (dispatch: Dispatch) => {\r\n    console.log('test1')\r\n    try {\r\n      const { data, status } = await authApiCall.get(\r\n        'FailAnalysisReport/GetComments',\r\n        {\r\n          params: {\r\n            system,\r\n            failUniqueId,\r\n          },\r\n        }\r\n      )\r\n\r\n      if (status === 200) {\r\n        dispatch(\r\n          setComments({\r\n            data: data,\r\n          })\r\n        )\r\n        return data\r\n      }\r\n    } catch {\r\n      dispatch(\r\n        setComments({\r\n          data: 'NULL',\r\n        })\r\n      )\r\n      //console.log(null)\r\n    }\r\n  }\r\nexport const getBetaFailAnalysis: any =\r\n  (\r\n    action: string,\r\n    fromDate: string,\r\n    toDate: string,\r\n    ageFilter: string,\r\n    accountNumber: string,\r\n    branch: string,\r\n    subsidiaryNumber: string,\r\n    buySell: string,\r\n    cusip: string,\r\n    pageNumber: number,\r\n    pageSize: number = 20,\r\n    sortBy: string = 'SnapShotDate, Age',\r\n    sortDirection: string = 'ASC',\r\n    searchFilter: string = ''\r\n  ) =>\r\n  async (dispatch: Dispatch) => {\r\n    dispatch(setIsLoading(true))\r\n    dispatch(\r\n      SetBetaFailAnalysis({\r\n        data: '',\r\n      })\r\n    )\r\n    try {\r\n      const { data, status } = await authApiCall.post(\r\n        'FailAnalysisReport/GetBetaFailAnalysisHistoryReport',\r\n        {\r\n          fromDate,\r\n          toDate,\r\n          ageFilter,\r\n          accountNumber,\r\n          branch,\r\n          subsidiaryNumber,\r\n          buySell,\r\n          cusip,\r\n          pageNumber,\r\n          pageSize,\r\n          sortBy,\r\n          sortDirection,\r\n          searchFilter,\r\n        }\r\n      )\r\n\r\n      if (status === 200) {\r\n        dispatch(setAction(action))\r\n        dispatch(\r\n          SetBetaFailAnalysis({\r\n            data: data,\r\n          })\r\n        )\r\n        dispatch(setIsLoading(false))\r\n        return true\r\n      }\r\n    } catch (e: any) {\r\n      console.log('null')\r\n      dispatch(setIsLoading(false))\r\n      dispatch(\r\n        SetBetaFailAnalysis({\r\n          data: '',\r\n        })\r\n      )\r\n    }\r\n  }\r\n\r\nexport const betaFailAnalysisDataSelector = (store: StoreState) =>\r\n  store.failAnalysis.betafailanalysis.betaFailAnalysis\r\nexport const actionSelector = (store: StoreState) =>\r\n  store.failAnalysis.betafailanalysis.action\r\nexport const errorSelector = (store: StoreState) =>\r\n  store.failAnalysis.betafailanalysis.error\r\nexport const isLoadingSelector = (store: StoreState) =>\r\n  store.failAnalysis.betafailanalysis.isLoading\r\nexport const commentSelector = (store: StoreState) =>\r\n  store.failAnalysis.betafailanalysis.comments\r\n  export const commentStatusSelector = (store: StoreState) =>\r\n  store.failAnalysis.betafailanalysis.commentStatus\r\nexport default reducer\r\n"]},"metadata":{},"sourceType":"module"}