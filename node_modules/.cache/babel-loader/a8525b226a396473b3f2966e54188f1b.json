{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-inferrable-types */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable prefer-const */\nimport { createSlice } from '@reduxjs/toolkit';\nimport { authApiCall } from '../../utils/api';\nlet initialState = {\n  betaFailAnalysis: [],\n  selectedRow: [],\n  totalCount: 0,\n  isLoading: false,\n  csv: '',\n  action: ''\n};\nconst {\n  actions,\n  reducer\n} = createSlice({\n  name: 'beta-fail-analysis',\n  initialState,\n  reducers: {\n    SetBetaFailAnalysis: (state, action) => {\n      state.betaFailAnalysis = action.payload.data;\n    },\n    setSelectedRow: (state, action) => {\n      state.selectedRow = action.payload.data;\n    },\n    setIsLoading: (state, action) => {\n      state.isLoading = action.payload;\n    },\n    setAction: (state, action) => {\n      state.action = action.payload;\n    }\n  }\n});\nexport const {\n  setAction,\n  SetBetaFailAnalysis,\n  setIsLoading,\n  setReturnMailAndEmailReportCSV,\n  setSelectedRow\n} = actions;\n/**\r\n * getReturnMail\r\n * API - GET call to get beta new accounts report\r\n * @param {string} startDate\r\n * @param {string} endDate\r\n *  @param {string} action\r\n */\n\nexport const getAction = action => async dispatch => {\n  dispatch(setAction(action));\n  dispatch(SetBetaFailAnalysis({\n    data: ''\n  }));\n};\nexport const putUserComment = (system, failUniqueId, comment, createdBy, createdOn) => async () => {\n  console.log('test1');\n\n  try {\n    const {\n      data,\n      status\n    } = await authApiCall.post('opsfailprocessapi/FailAnalysisReport/AddComment', {\n      system,\n      failUniqueId,\n      comment,\n      createdBy,\n      createdOn\n    });\n\n    if (status === 200) {\n      return data;\n    }\n  } catch {\n    //console.log(null)\n    return [];\n  }\n};\nexport const getBetaFailAnalysis = function (action, report_Type, fromDate, toDate, ageFilter, accountNumber, branch, subsidiaryNumber, buySell, cusip, pageNumber) {\n  let pageSize = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 10;\n  let sortBy = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 'SnapShotDate, Age';\n  let sortDirection = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 'ASC';\n  let searchFilter = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : '';\n  return async dispatch => {\n    dispatch(setIsLoading(true));\n    dispatch(SetBetaFailAnalysis({\n      data: ''\n    }));\n\n    try {\n      const {\n        data,\n        status\n      } = await authApiCall.post('opsfailprocessapi/FailAnalysisReport/GetBetaFailAnalysisReport', {\n        report_Type,\n        fromDate,\n        toDate,\n        ageFilter,\n        accountNumber,\n        branch,\n        subsidiaryNumber,\n        buySell,\n        cusip,\n        pageNumber,\n        pageSize,\n        sortBy,\n        sortDirection,\n        searchFilter\n      });\n\n      if (status === 200) {\n        dispatch(setAction(action));\n        dispatch(SetBetaFailAnalysis({\n          data: data\n        }));\n        dispatch(setIsLoading(false));\n        return data;\n      }\n    } catch (e) {\n      console.log('null');\n      dispatch(setIsLoading(false));\n      dispatch(SetBetaFailAnalysis({\n        data: ''\n      }));\n    }\n  };\n};\nexport const getSelectedRow = function (report_Type, fromDate, toDate, ageFilter, accountNumber, branch, subsidiaryNumber, buySell, cusip) {\n  let pageNumber = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n  let pageSize = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 0;\n  let sortBy = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 'SnapShotDate, Age';\n  let sortDirection = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 'ASC';\n  let searchFilter = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : '';\n  return async dispatch => {\n    try {\n      const {\n        data,\n        status\n      } = await authApiCall.post('opsfailprocessapi/FailAnalysisReport/GetBetaFailAnalysisReport', {\n        report_Type,\n        fromDate,\n        toDate,\n        ageFilter,\n        accountNumber,\n        branch,\n        subsidiaryNumber,\n        buySell,\n        cusip,\n        pageNumber,\n        pageSize,\n        sortBy,\n        sortDirection,\n        searchFilter\n      });\n\n      if (status === 200) {\n        dispatch(setSelectedRow({\n          data: data\n        }));\n      }\n    } catch (e) {\n      console.log('null');\n    }\n  };\n};\nexport const betaFailAnalysisDataSelector = store => store.failAnalysis.betafailanalysis.betaFailAnalysis;\nexport const selectedRowDataSelector = store => store.failAnalysis.betafailanalysis.selectedRow;\nexport const actionSelector = store => store.failAnalysis.betafailanalysis.action;\nexport const errorSelector = store => store.failAnalysis.betafailanalysis.error;\nexport const isLoadingSelector = store => store.failAnalysis.betafailanalysis.isLoading;\nexport default reducer;","map":{"version":3,"names":["createSlice","authApiCall","initialState","betaFailAnalysis","selectedRow","totalCount","isLoading","csv","action","actions","reducer","name","reducers","SetBetaFailAnalysis","state","payload","data","setSelectedRow","setIsLoading","setAction","setReturnMailAndEmailReportCSV","getAction","dispatch","putUserComment","system","failUniqueId","comment","createdBy","createdOn","console","log","status","post","getBetaFailAnalysis","report_Type","fromDate","toDate","ageFilter","accountNumber","branch","subsidiaryNumber","buySell","cusip","pageNumber","pageSize","sortBy","sortDirection","searchFilter","e","getSelectedRow","betaFailAnalysisDataSelector","store","failAnalysis","betafailanalysis","selectedRowDataSelector","actionSelector","errorSelector","error","isLoadingSelector"],"sources":["D:/New folder (6)/demo/src/store/failAnalysis/beta-fail-analysis.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-inferrable-types */\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { StoreState } from '../index'\r\n\r\n/* eslint-disable prefer-const */\r\n\r\nimport { createSlice, Dispatch, PayloadAction, Slice } from '@reduxjs/toolkit'\r\nimport { authApiCall } from '../../utils/api'\r\n\r\ninterface State {\r\n  csv: string\r\n  betaFailAnalysis: []\r\n  selectedRow: []\r\n  totalCount: number\r\n  isLoading: boolean\r\n  action: string\r\n}\r\n\r\nlet initialState: State = {\r\n  betaFailAnalysis: [],\r\n  selectedRow: [],\r\n  totalCount: 0,\r\n  isLoading: false,\r\n  csv: '',\r\n  action: '',\r\n}\r\n\r\nconst { actions, reducer }: Slice = createSlice({\r\n  name: 'beta-fail-analysis',\r\n  initialState,\r\n  reducers: {\r\n    SetBetaFailAnalysis: (state: State, action: PayloadAction<any>) => {\r\n      state.betaFailAnalysis = action.payload.data\r\n    },\r\n    setSelectedRow: (state: State, action: PayloadAction<any>) => {\r\n      state.selectedRow = action.payload.data\r\n    },\r\n    setIsLoading: (state: State, action: PayloadAction<boolean>) => {\r\n      state.isLoading = action.payload\r\n    },\r\n\r\n    setAction: (state: State, action: PayloadAction<string>) => {\r\n      state.action = action.payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const {\r\n  setAction,\r\n  SetBetaFailAnalysis,\r\n  setIsLoading,\r\n  setReturnMailAndEmailReportCSV,\r\n  setSelectedRow,\r\n} = actions\r\n\r\n/**\r\n * getReturnMail\r\n * API - GET call to get beta new accounts report\r\n * @param {string} startDate\r\n * @param {string} endDate\r\n *  @param {string} action\r\n */\r\nexport const getAction: any =\r\n  (action: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setAction(action))\r\n    dispatch(\r\n      SetBetaFailAnalysis({\r\n        data: '',\r\n      })\r\n    )\r\n  }\r\nexport const putUserComment: any =\r\n  (\r\n    system: string,\r\n    failUniqueId: string,\r\n    comment: string,\r\n    createdBy: string,\r\n    createdOn: string\r\n  ) =>\r\n  async () => {\r\n    console.log('test1')\r\n    try {\r\n      const { data, status } = await authApiCall.post(\r\n        'opsfailprocessapi/FailAnalysisReport/AddComment',\r\n        {\r\n          system,\r\n          failUniqueId,\r\n          comment,\r\n          createdBy,\r\n          createdOn,\r\n        }\r\n      )\r\n\r\n      if (status === 200) {\r\n        return data\r\n      }\r\n    } catch {\r\n      //console.log(null)\r\n      return []\r\n    }\r\n  }\r\n\r\nexport const getBetaFailAnalysis: any =\r\n  (\r\n    action: string,\r\n    report_Type: string,\r\n    fromDate: string,\r\n    toDate: string,\r\n    ageFilter: string,\r\n    accountNumber: string,\r\n    branch: string,\r\n    subsidiaryNumber: string,\r\n    buySell: string,\r\n    cusip: string,\r\n    pageNumber: number,\r\n    pageSize: number = 10,\r\n    sortBy: string = 'SnapShotDate, Age',\r\n    sortDirection: string = 'ASC',\r\n    searchFilter: string = ''\r\n  ) =>\r\n  async (dispatch: Dispatch) => {\r\n    dispatch(setIsLoading(true))\r\n    dispatch(\r\n      SetBetaFailAnalysis({\r\n        data: '',\r\n      })\r\n    )\r\n    try {\r\n      const { data, status } = await authApiCall.post(\r\n        'opsfailprocessapi/FailAnalysisReport/GetBetaFailAnalysisReport',\r\n        {\r\n          report_Type,\r\n          fromDate,\r\n          toDate,\r\n          ageFilter,\r\n          accountNumber,\r\n          branch,\r\n          subsidiaryNumber,\r\n          buySell,\r\n          cusip,\r\n          pageNumber,\r\n          pageSize,\r\n          sortBy,\r\n          sortDirection,\r\n          searchFilter,\r\n        }\r\n      )\r\n\r\n      if (status === 200) {\r\n        dispatch(setAction(action))\r\n        dispatch(\r\n          SetBetaFailAnalysis({\r\n            data: data,\r\n          })\r\n        )\r\n        dispatch(setIsLoading(false))\r\n        return data\r\n      }\r\n    } catch (e: any) {\r\n      console.log('null')\r\n      dispatch(setIsLoading(false))\r\n      dispatch(\r\n        SetBetaFailAnalysis({\r\n          data: '',\r\n        })\r\n      )\r\n    }\r\n  }\r\nexport const getSelectedRow: any =\r\n  (\r\n    report_Type: string,\r\n    fromDate: string,\r\n    toDate: string,\r\n    ageFilter: string,\r\n    accountNumber: string,\r\n    branch: string,\r\n    subsidiaryNumber: string,\r\n    buySell: string,\r\n    cusip: string,\r\n    pageNumber: number = 0,\r\n    pageSize: number = 0,\r\n    sortBy: string = 'SnapShotDate, Age',\r\n    sortDirection: string = 'ASC',\r\n    searchFilter: string = ''\r\n  ) =>\r\n  async (dispatch: Dispatch) => {\r\n    try {\r\n      const { data, status } = await authApiCall.post(\r\n        'opsfailprocessapi/FailAnalysisReport/GetBetaFailAnalysisReport',\r\n        {\r\n          report_Type,\r\n          fromDate,\r\n          toDate,\r\n          ageFilter,\r\n          accountNumber,\r\n          branch,\r\n          subsidiaryNumber,\r\n          buySell,\r\n          cusip,\r\n          pageNumber,\r\n          pageSize,\r\n          sortBy,\r\n          sortDirection,\r\n          searchFilter,\r\n        }\r\n      )\r\n\r\n      if (status === 200) {\r\n        dispatch(\r\n          setSelectedRow({\r\n            data: data,\r\n          })\r\n        )\r\n      }\r\n    } catch (e: any) {\r\n      console.log('null')\r\n    }\r\n  }\r\n\r\nexport const betaFailAnalysisDataSelector = (store: StoreState) =>\r\n  store.failAnalysis.betafailanalysis.betaFailAnalysis\r\nexport const selectedRowDataSelector = (store: StoreState) =>\r\n  store.failAnalysis.betafailanalysis.selectedRow\r\nexport const actionSelector = (store: StoreState) =>\r\n  store.failAnalysis.betafailanalysis.action\r\nexport const errorSelector = (store: StoreState) =>\r\n  store.failAnalysis.betafailanalysis.error\r\nexport const isLoadingSelector = (store: StoreState) =>\r\n  store.failAnalysis.betafailanalysis.isLoading\r\nexport default reducer\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}